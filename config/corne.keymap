/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>

&mt {
    flavor = "balanced";
    quick-tap-ms = <175>;
};

&lt { flavor = "hold-preferred"; };

/ {
    combos {
        compatible = "zmk,combos";

        Caps_L {
            bindings = <&kp CAPSLOCK>;
            key-positions = <27 37>;
            layers = <0>;
            require-prior-idle-ms = <100>;
        };

        TAB_L {
            bindings = <&kp TAB>;
            key-positions = <17 37>;
            layers = <0>;
            require-prior-idle-ms = <50>;
        };

        ENTER_L {
            bindings = <&kp ENTER>;
            key-positions = <5 37>;
            layers = <0>;
            require-prior-idle-ms = <70>;
        };

        ESC_L {
            bindings = <&kp ESCAPE>;
            key-positions = <37 29>;
            layers = <0>;
            require-prior-idle-ms = <70>;
        };

        VolUp_R {
            bindings = <&kp C_VOLUME_UP>;
            key-positions = <8 9 7>;
            layers = <0>;
            require-prior-idle-ms = <100>;
        };

        VolDown_R {
            bindings = <&kp C_VOLUME_DOWN>;
            key-positions = <19 20 21>;
            layers = <0>;
            require-prior-idle-ms = <100>;
        };

        LCtrl_L {
            bindings = <&kp LEFT_CONTROL>;
            key-positions = <14 15>;
            layers = <0 1 2 3 5 6 7 8 11 12 13>;
            slow-release;
            require-prior-idle-ms = <70>;
        };

        LAlt_L {
            bindings = <&kp LEFT_ALT>;
            key-positions = <15 16>;
            layers = <0 1 2 3 5 6 7 8 11 12 13>;
            slow-release;
            require-prior-idle-ms = <70>;
        };

        LGUI_L {
            bindings = <&kp LEFT_GUI>;
            key-positions = <16 17>;
            layers = <0 1 2 3 5 6 7 8 11 12 13>;
            slow-release;
            require-prior-idle-ms = <70>;
        };

        LCtrl_R {
            bindings = <&kp LEFT_CONTROL>;
            key-positions = <21 20>;
            layers = <0 1 3 4 5 6 7 8 12>;
            slow-release;
            require-prior-idle-ms = <70>;
        };

        LAlt_R {
            bindings = <&kp LEFT_ALT>;
            key-positions = <20 19>;
            layers = <0 1 3 4 5 6 7 8 12>;
            slow-release;
            require-prior-idle-ms = <70>;
        };

        LGUI_R {
            bindings = <&kp LEFT_GUI>;
            key-positions = <19 18>;
            layers = <0 1 3 4 5 6 7 8 12>;
            slow-release;
            require-prior-idle-ms = <70>;
        };

        MO_FUNC_L {
            bindings = <&mo 7>;
            key-positions = <37 16>;
            layers = <0 2 3 5 8 10 13>;
            slow-release;
            require-prior-idle-ms = <100>;
        };

        MO_FUNC_R {
            bindings = <&mo 8>;
            key-positions = <40 19>;
            layers = <0 1 4 6 7 12 9>;
            slow-release;
            require-prior-idle-ms = <100>;
        };

        MO_NAV_L {
            bindings = <&mo 4>;
            key-positions = <15 37 16>;
            layers = <0 2 3 5 8 10 13>;
            slow-release;
            require-prior-idle-ms = <70>;
        };

        MO_NUM_R {
            bindings = <&mo 5>;
            key-positions = <40 20 21>;
            layers = <0 1 4 6 7 12 9>;
            slow-release;
            require-prior-idle-ms = <70>;
        };

        MO_MODI_L {
            bindings = <&mo 9>;
            key-positions = <37 14>;
            layers = <0 2 3 5 8 10 13>;
            slow-release;
            require-prior-idle-ms = <70>;
        };

        MO_MODI_R {
            bindings = <&mo 10>;
            key-positions = <40 21>;
            layers = <0 1 4 6 7 9 12>;
            slow-release;
            require-prior-idle-ms = <70>;
        };

        MO_BRK_L {
            bindings = <&mo 6>;
            key-positions = <37 14 15>;
            layers = <0 2 3 5 8 10 13>;
            slow-release;
            require-prior-idle-ms = <70>;
        };

        MO_NUMSP_L {
            bindings = <&mo 12>;
            key-positions = <13 14 37>;
            layers = <0 2 3 5 8 10 13>;
            slow-release;
            require-prior-idle-ms = <70>;
        };

        MO_MOUSE {
            bindings = <&mo 11>;
            key-positions = <40 31>;
            layers = <0>;
            slow-release;
            require-prior-idle-ms = <70>;
        };

        TO_BASE_L {
            bindings = <&to 0>;
            key-positions = <38 37 36>;
        };

        MO_SETTING {
            bindings = <&mo 14>;
            key-positions = <37 14 3 5>;
            require-prior-idle-ms = <100>;
            slow-release;
        };

        bootload {
            bindings = <&bootloader>;
            key-positions = <5 29 29>;
            layers = <14>;
        };

        sysreset {
            bindings = <&sys_reset>;
            key-positions = <4 14>;
            layers = <14>;
        };

        SQUOTE_R {
            bindings = <&kp SINGLE_QUOTE>;
            key-positions = <30 31>;
            layers = <0>;
            require-prior-idle-ms = <50>;
        };

        DQUOTE_R {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <32 31>;
            layers = <0>;
            require-prior-idle-ms = <50>;
        };

        MO_MISC_R {
            bindings = <&mo 13>;
            key-positions = <40 21 22>;
            slow-release;
            layers = <0 1 4 6 7 9 12>;
            require-prior-idle-ms = <70>;
        };

        GRAVE_R {
            bindings = <&kp GRAVE>;
            key-positions = <7 6>;
            layers = <0>;
            require-prior-idle-ms = <50>;
        };

        BSLASH_R {
            bindings = <&kp BACKSLASH>;
            key-positions = <10 9>;
            layers = <0>;
            timeout-ms = <30>;
            require-prior-idle-ms = <50>;
        };

        LBRK_S_R {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <7 20>;
            layers = <0>;
            require-prior-idle-ms = <50>;
        };

        RBRK_S_R {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <19 8>;
            layers = <0>;
            require-prior-idle-ms = <50>;
        };

        LBRK_M_R {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <19 32>;
            layers = <0>;
            require-prior-idle-ms = <50>;
        };

        RBRK_M_R {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <20 31>;
            layers = <0>;
            require-prior-idle-ms = <50>;
        };

        LBRK_L_R {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <21 34>;
            layers = <0>;
            require-prior-idle-ms = <50>;
        };

        RBRK_L_R {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <22 33>;
            layers = <0>;
            require-prior-idle-ms = <50>;
        };

        LCTRL_SHFT_L {
            bindings = <&kp LC(LEFT_SHIFT)>;
            key-positions = <14 15 25>;
            slow-release;
            layers = <0 1 2 3 5 6 7 8 11 12 13>;
            require-prior-idle-ms = <70>;
        };

        LALT_SHFT_L {
            bindings = <&kp LA(LEFT_SHIFT)>;
            key-positions = <16 25 15>;
            slow-release;
            layers = <0 1 2 3 5 6 7 8 11 12 13>;
            require-prior-idle-ms = <70>;
        };

        LCTRL_ALT_L {
            bindings = <&kp LC(LEFT_ALT)>;
            key-positions = <16 14 15>;
            slow-release;
            layers = <0 1 2 3 5 6 7 8 11 12 13>;
            require-prior-idle-ms = <70>;
        };

        LGUI_SHFT_L {
            bindings = <&kp LG(LEFT_SHIFT)>;
            key-positions = <17 25>;
            slow-release;
            layers = <0 1 2 3 5 6 7 8 11 12 13>;
            require-prior-idle-ms = <70>;
        };

        LGUI_CTRL_L {
            bindings = <&kp LG(LCTRL)>;
            key-positions = <17 14 15>;
            slow-release;
            layers = <0 1 2 3 5 6 7 8 11 12 13>;
            require-prior-idle-ms = <70>;
        };

        TO_BASE_R {
            bindings = <&to 0>;
            key-positions = <39 40 41>;
        };

        LSCA_L {
            bindings = <&kp LC(LA(LEFT_SHIFT))>;
            key-positions = <14 15 25 16>;
            slow-release;
            require-prior-idle-ms = <70>;
            layers = <0 1 2 3 5 6 7 8 11 12 13>;
        };
    };

    behaviors {
        TD_Dot_Comma: TD_Dot_Comma {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_DOT_COMMA";
            #binding-cells = <0>;
            bindings = <&kp KP_DOT>, <&kp KP_COMMA>;
        };

        TD_Add_Sub: TD_Add_Sub {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_ADD_SUB";
            #binding-cells = <0>;
            bindings = <&kp KP_PLUS>, <&kp KP_MINUS>;
        };

        TD_Mul_Div: TD_Mul_Div {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_MUL_DIV";
            #binding-cells = <0>;
            bindings = <&kp KP_MULTIPLY>, <&kp KP_DIVIDE>;
        };

        ht: ht {
            compatible = "zmk,behavior-hold-tap";
            label = "ht homerow";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <130>;
            flavor = "tap-preferred";
        };

        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            hold-trigger-key-positions = <6 18 30 31 19 7 8 20 32 33 21 9 10 22 34 35 23 11 39 40 41>;
            hold-trigger-on-release;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
        };

        hmr: hmr_ {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR ";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            hold-trigger-on-release;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38 39>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        BASE_LR {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            display-name = "BASE";
            bindings = <
&none  &kp Q         &kp W        &kp E  &kp R            &kp T        &kp Y    &kp U            &kp I      &kp O          &kp P             &none
&none  &hml LSHFT A  &kp S        &kp D  &kp F            &kp G        &kp H    &kp J            &kp K      &kp L          &hmr  RSHFT SEMI  &none
&none  &mt LSHFT Z   &mt LSHFT X  &kp C  &kp V            &kp B        &kp N    &kp M            &kp COMMA  &mt RSHFT DOT  &mt RSHFT SLASH   &none
                                  &mo 4  &lt 1 RIGHT_ALT  &kp SPACE    &kp RET  &lt 2 RIGHT_ALT  &mo 3
            >;
        };

        NUM_L {
            display-name = "NUM_L";
            bindings = <
&none  &kp MINUS     &kp EQUAL     &kp BACKSPACE  &kp DELETE    &kp SLASH       &trans  &trans  &trans  &trans  &trans  &none
&none  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3   &kp NUMBER_4  &kp NUMBER_5    &trans  &trans  &trans  &trans  &trans  &none
&none  &kp NUMBER_6  &kp NUMBER_7  &kp NUMBER_8   &kp NUMBER_9  &kp NUMBER_0    &trans  &trans  &trans  &trans  &trans  &none
                                   &trans         &trans        &trans          &trans  &trans  &trans
            >;
        };

        NAV_R {
            display-name = "NAV_R";
            bindings = <
&none  &trans  &trans  &trans  &trans  &trans    &kp ENTER  &kp HOME        &kp UP_ARROW    &kp END          &kp RSHIFT     &none
&none  &trans  &trans  &trans  &trans  &trans    &kp TAB    &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &kp PAGE_UP    &none
&none  &trans  &trans  &trans  &trans  &trans    &kp ESC    &kp INSERT      &kp BACKSPACE   &kp DELETE       &kp PAGE_DOWN  &none
                       &trans  &trans  &trans    &trans     &trans          &trans
            >;
        };

        BRK_R {
            display-name = "BRK_R";
            bindings = <
&none  &trans  &trans  &trans  &trans  &trans    &kp GRAVE  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp PIPE          &kp BACKSLASH      &none
&none  &trans  &trans  &trans  &trans  &trans    &kp TILDE  &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &none
&none  &trans  &trans  &trans  &trans  &trans    &kp APOS   &kp DOUBLE_QUOTES     &trans                 &trans            &trans             &none
                       &trans  &trans  &trans    &trans     &trans                &trans
            >;
        };

        NAV_L {
            display-name = "NAV_L";
            bindings = <
&none  &kp LSHIFT     &kp HOME        &kp UP_ARROW    &kp END          &kp ENTER    &trans  &trans  &trans  &trans  &trans  &none
&none  &kp PAGE_UP    &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &kp TAB      &trans  &trans  &trans  &trans  &trans  &none
&none  &kp PAGE_DOWN  &kp INSERT      &kp BACKSPACE   &kp DELETE       &kp ESC      &trans  &trans  &trans  &trans  &trans  &none
                                      &trans          &trans           &trans       &trans  &trans  &trans
            >;
        };

        NUM_R {
            display-name = "NUM_R";
            bindings = <
&none  &trans  &trans  &trans  &trans  &trans    &kp KP_EQUAL   &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp PERCENT  &none
&none  &trans  &trans  &trans  &trans  &trans    &TD_Dot_Comma  &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &TD_Add_Sub  &none
&none  &trans  &trans  &trans  &trans  &trans    &kp NUMBER_0   &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &TD_Mul_Div  &none
                       &trans  &trans  &trans    &trans         &trans        &trans
            >;
        };

        BRK_L {
            display-name = "BRK_L";
            bindings = <
&none  &kp BACKSLASH     &kp PIPE           &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp GRAVE         &trans  &trans  &trans  &trans  &trans  &none
&none  &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp TILDE         &trans  &trans  &trans  &trans  &trans  &none
&none  &kp SLASH         &kp PERIOD         &kp COMMA             &kp DOUBLE_QUOTES      &kp APOSTROPHE    &trans  &trans  &trans  &trans  &trans  &none
                                            &trans                &trans                 &trans            &trans  &trans  &trans
            >;
        };

        FUNC_L {
            display-name = "FUNC_L";
            bindings = <
&none  &kp F11  &kp F12  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &none      &trans  &trans  &trans  &trans  &trans  &none
&none  &kp F1   &kp F2   &kp F3             &kp F4           &kp F5     &trans  &trans  &trans  &trans  &trans  &none
&none  &kp F6   &kp F7   &kp F8             &kp F9           &kp F10    &trans  &trans  &trans  &trans  &trans  &none
                         &trans             &trans           &trans     &trans  &trans  &trans
            >;
        };

        FUNC_R {
            display-name = "FUNC_R";
            bindings = <
&none  &trans  &trans  &trans  &trans  &trans    &kp F11  &kp F12  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &none    &none
&none  &trans  &trans  &trans  &trans  &trans    &kp F1   &kp F2   &kp F3             &kp F4           &kp F5   &none
&none  &trans  &trans  &trans  &trans  &trans    &kp F6   &kp F7   &kp F8             &kp F9           &kp F10  &none
                       &trans  &trans  &trans    &trans   &trans   &trans
            >;
        };

        MODI_L {
            display-name = "MODI_L";
            bindings = <
&none  &none           &none             &kp BACKSPACE  &kp DELETE  &kp ENTER    &trans  &trans  &trans  &trans  &trans  &none
&none  &kp LSHIFT      &kp LEFT_CONTROL  &kp LEFT_ALT   &kp LGUI    &kp TAB      &trans  &trans  &trans  &trans  &trans  &none
&none  &kp LEFT_SHIFT  &none             &none          &none       &kp ESC      &trans  &trans  &trans  &trans  &trans  &none
                                         &trans         &trans      &trans       &trans  &trans  &trans
            >;
        };

        MODI_R {
            display-name = "MODI_R";
            bindings = <
&none  &trans  &trans  &trans  &trans  &trans    &kp ENTER  &none         &kp BACKSPACE  &none             &none            &none
&none  &trans  &trans  &trans  &trans  &trans    &kp TAB    &kp LEFT_GUI  &kp LEFT_ALT   &kp LEFT_CONTROL  &kp RSHIFT       &none
&none  &trans  &trans  &trans  &trans  &trans    &kp ESC    &none         &none          &none             &kp RIGHT_SHIFT  &none
                       &trans  &trans  &trans    &trans     &trans        &trans
            >;
        };

        MOUSE_LR {
            display-name = "MOUSE";
            bindings = <
&none  &trans  &mkp LCLK  &mkp MCLK  &mkp RCLK  &trans    &none   &msc SCRL_LEFT  &mmv MOVE_UP    &msc SCRL_RIGHT  &none           &none
&none  &trans  &trans     &trans     &trans     &trans    &none   &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &msc SCRL_UP    &none
&none  &trans  &trans     &trans     &trans     &trans    &none   &mkp LCLK       &mkp MCLK       &mkp RCLK        &msc SCRL_DOWN  &none
                          &trans     &trans     &trans    &trans  &trans          &trans
            >;
        };

        NUMSP_L {
            display-name = "NSP_L";
            bindings = <
&none  &kp LS(MINUS)     &kp LS(EQUAL)     &kp BACKSPACE     &kp DELETE        &kp LS(SLASH)       &trans  &trans  &trans  &trans  &trans  &none
&none  &kp LS(NUMBER_1)  &kp LS(NUMBER_2)  &kp LS(NUMBER_3)  &kp LS(NUMBER_4)  &kp LS(NUMBER_5)    &trans  &trans  &trans  &trans  &trans  &none
&none  &kp LS(NUMBER_6)  &kp LS(NUMBER_7)  &kp LS(NUMBER_8)  &kp LS(NUMBER_9)  &kp LS(NUMBER_0)    &trans  &trans  &trans  &trans  &trans  &none
                                           &trans            &trans            &trans              &trans  &trans  &trans
            >;
        };

        MISC_R {
            display-name = "MISC_R";
            bindings = <
&none  &trans  &trans  &trans  &trans  &trans    &none          &kp KP_NUMLOCK  &kp PRINTSCREEN  &kp SCROLLLOCK  &kp PAUSE_BREAK  &none
&none  &trans  &trans  &trans  &trans  &trans    &kp RIGHT_ALT  &kp LANG1       &kp K_APP        &kp LANG2       &kp CAPS         &none
&none  &trans  &trans  &trans  &trans  &trans    &none          &none           &none            &none           &none            &none
                       &trans  &trans  &trans    &trans         &trans          &trans
            >;
        };

        SETTING_LR {
            display-name = "SET";
            bindings = <
&none  &none       &none       &kp E       &kp R              &kp T        &none          &none          &none          &none          &none          &none
&none  &none       &kp S       &soft_off   &ext_power EP_TOG  &none        &bt BT_SEL 0   &bt BT_SEL 1   &bt BT_SEL 2   &bt BT_SEL 3   &bt BT_SEL 4   &none
&none  &bt BT_CLR  &bt BT_PRV  &bt BT_NXT  &out OUT_TOG       &kp B        &bt BT_DISC 0  &bt BT_DISC 1  &bt BT_DISC 2  &bt BT_DISC 3  &bt BT_DISC 4  &none
                               &trans      &trans             &kp SPACE    &kp ENTER      &trans         &trans
            >;
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };
};
